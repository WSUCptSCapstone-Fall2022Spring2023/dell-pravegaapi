// Automatically generated by Interoptopus.

#pragma warning disable 0105
using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using Pravega;
#pragma warning restore 0105

namespace Pravega
{

    /// ******************************************
    ///     Helper structs (used for transferring
    ///     small Rust native components to C#)
    /// ******************************************
    /// <summary>
    ///     Helper struct that helps transfer strings between Rust and C# as this struct is C palatable.
    /// </summary>
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct CustomString
    {
        public uint capacity;
        public uint length;
        public CallbackCharFFISlice string_slice;
    }
    /// <summary>
    ///     Helper struct that helps transfer tuples containing u16 values between Rust and C# as this struct is C palatable.
    /// </summary>
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct U16Tuple
    {
        ushort value1;
        ushort value2;
    }



    /// ******************************************
    ///     Pravega Component structs
    /// ******************************************
    //  ***** Wrapper for Connection Type *****
    public enum ConnectionTypeWrapper
    {
        Happy = 0,
        SegmentIsSealed = 1,
        SegmentIsTruncated = 2,
        WrongHost = 3,
        Tokio = 4,
    }
    /*
    Originally from
    pravega-client-rust/config/src/connection_type.rs
    as:

    #[derive(Debug, PartialEq, Clone, Copy)]
    pub enum ConnectionType {
        Mock(MockType),
        Tokio,
    }

    #[derive(Debug, PartialEq, Clone, Copy)]
    pub enum MockType {
        Happy,
        SegmentIsSealed,
        SegmentIsTruncated,
        WrongHost,
    }

    */

    // ***** Wrapper for ClientConfig *****
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct ClientConfigWrapper
    {
        public uint max_controller_connections;
        public ConnectionTypeWrapper connection_type;
        public RetryWithBackoffWrapper retry_policy;
        public PravegaNodeUriWrapper controller_uri;
        public ulong transaction_timeout_time;
        public bool mock;
        public bool is_tls_enabled;
        public bool disable_cert_verification;
        public CredentialsWrapper credentials;
        public bool is_auth_enabled;
        public ulong reader_wrapper_buffer_size;
        public ushort request_timeout0;
        public ushort request_timeout1;
        public CallbackCustomStringFFISlice trustcerts;
    }
    /*
    Originally as: 

    pub struct ClientConfig{

        // No issue transferring
        #[get_copy = "pub"]
        #[builder(default = "u32::max_value()")]
        pub max_controller_connections: u32,

        // Connection Type -> Mock(MockType) + Tokio
        // Mock() imported library X. Instead, "Happy, SegmentIsSealed, SegmentIsTruncated, WrongHost," which is inside MockType
        #[get_copy = "pub"]
        #[builder(default = "ConnectionType::Tokio")]
        pub connection_type: ConnectionType,

        // See above
        #[get_copy = "pub"]
        #[builder(default = "RetryWithBackoff::default()")]
        pub retry_policy: RetryWithBackoff,

        // See above
        #[get]
        pub controller_uri: PravegaNodeUri,

        #[get_copy = "pub"]
        #[builder(default = "90 * 1000")]
        pub transaction_timeout_time: u64,

        #[get_copy = "pub"]
        #[builder(default = "false")]
        pub mock: bool,

        #[get_copy = "pub"]
        #[builder(default = "self.default_is_tls_enabled()")]
        pub is_tls_enabled: bool,

        #[builder(default = "false")]
        pub disable_cert_verification: bool,

        #[builder(default = "self.extract_trustcerts()")]
        pub trustcerts: Vec<String>,

        #[builder(default = "self.extract_credentials()")]
        pub credentials: Credentials,

        #[get_copy = "pub"]
        #[builder(default = "false")]
        pub is_auth_enabled: bool,

        #[get_copy = "pub"]
        #[builder(default = "1024 * 1024")]
        pub reader_wrapper_buffer_size: usize,

        #[get_copy = "pub"]
        #[builder(default = "self.default_timeout()")]
        pub request_timeout: Duration,
    }
    */

    // Helper Struct for Credentials
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct CredWrapper
    {
        public bool is_expired_result;
        public CustomString get_request_metadata_result;
    }
    // ***** Wrapper for Credentials *****
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct CredentialsWrapper
    {
        CredWrapper inner;
    }
    /*
    Originally from pravega-client-rust/config/src/credentials.rs 
    as:
        #[derive(Debug)]
        pub struct Credentials {
            inner: Box<dyn Cred>,
        }
    */

    // ***** Wrapper for Credentials *****
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct PravegaNodeUriWrapper
    {
        public CustomString inner;
    }
    /* 
        Originally from pravega-client-rust/shared/src/lib.rs
        as:
        #[derive(From, Shrinkwrap, Debug, Clone, Hash, PartialEq, Eq)]
        pub struct PravegaNodeUri(pub String);
    */

    // ***** Wrapper for RetryWithBackoff *****
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct RetryWithBackoffWrapper
    {
        ulong attempt;
        U16Tuple initial_delay;
        uint backoff_coefficient;
        public Optionu64 max_attempt;
        public OptionU16Tuple max_delay;
        public Optionf64 expiration_time;
    }
    /*
    Originally from pravega-client-rust/retry/src/retry_policy.rs
    as:
    pub struct RetryWithBackoff {
        attempt: usize,

        initial_delay: Duration,
        backoff_coefficient: u32,
        max_attempt: Option<usize>,
        max_delay: Option<Duration>,
        expiration_time: Option<Instant>,
    }
    */



    /// ******************************************
    ///     Slice types (segments of vectors)
    /// ******************************************
    ///A pointer to an array of data someone else owns which may not be modified.
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct SliceCustomString
    {
        ///Pointer to start of immutable data.
        IntPtr data;
        ///Number of elements.
        ulong len;
    }
    public partial struct SliceCustomString : IEnumerable<CustomString>
    {
        public SliceCustomString(GCHandle handle, ulong count)
        {
            this.data = handle.AddrOfPinnedObject();
            this.len = count;
        }
        public SliceCustomString(IntPtr handle, ulong count)
        {
            this.data = handle;
            this.len = count;
        }
        public CustomString this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                var size = Marshal.SizeOf(typeof(CustomString));
                var ptr = new IntPtr(data.ToInt64() + i * size);
                return Marshal.PtrToStructure<CustomString>(ptr);
            }
        }
        public CustomString[] Copied
        {
            get
            {
                var rval = new CustomString[len];
                for (var i = 0; i < (int) len; i++) {
                    rval[i] = this[i];
                }
                return rval;
            }
        }
        public int Count => (int) len;
        public IEnumerator<CustomString> GetEnumerator()
        {
            for (var i = 0; i < (int)len; ++i)
            {
                yield return this[i];
            }
        }
        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }

    /// A pointer to an array of data someone else owns which may not be modified.
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Sliceu8
    {
        ///Pointer to start of immutable data.
        IntPtr data;
        ///Number of elements.
        ulong len;
    }
    public partial struct Sliceu8 : IEnumerable<byte>
    {
        public Sliceu8(GCHandle handle, ulong count)
        {
            this.data = handle.AddrOfPinnedObject();
            this.len = count;
        }
        public Sliceu8(IntPtr handle, ulong count)
        {
            this.data = handle;
            this.len = count;
        }
        public byte this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                var size = Marshal.SizeOf(typeof(byte));
                var ptr = new IntPtr(data.ToInt64() + i * size);
                return Marshal.PtrToStructure<byte>(ptr);
            }
        }
        public byte[] Copied
        {
            get
            {
                var rval = new byte[len];
                for (var i = 0; i < (int) len; i++) {
                    rval[i] = this[i];
                }
                return rval;
            }
        }
        public int Count => (int) len;
        public IEnumerator<byte> GetEnumerator()
        {
            for (var i = 0; i < (int)len; ++i)
            {
                yield return this[i];
            }
        }
        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }



    /// ******************************************
    ///     Option types (similar to C# T? types)
    /// ******************************************
    /// <summary>
    ///     Option type containing boolean flag and maybe valid data.
    /// </summary> 
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct OptionU16Tuple
    {
        ///Element that is maybe valid.
        U16Tuple t;
        ///Byte where `1` means element `t` is valid.
        byte is_some;
    }
    public partial struct OptionU16Tuple
    {
        public static OptionU16Tuple FromNullable(U16Tuple? nullable)
        {
            var result = new OptionU16Tuple();
            if (nullable.HasValue)
            {
                result.is_some = 1;
                result.t = nullable.Value;
            }

            return result;
        }

        public U16Tuple? ToNullable()
        {
            return this.is_some == 1 ? this.t : (U16Tuple?)null;
        }
    }

    /// <summary>
    ///     Option type containing boolean flag and maybe valid data.
    /// </summary>     [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Optionf64
    {
        ///Element that is maybe valid.
        double t;
        ///Byte where `1` means element `t` is valid.
        byte is_some;
    }
    public partial struct Optionf64
    {
        public static Optionf64 FromNullable(double? nullable)
        {
            var result = new Optionf64();
            if (nullable.HasValue)
            {
                result.is_some = 1;
                result.t = nullable.Value;
            }

            return result;
        }

        public double? ToNullable()
        {
            return this.is_some == 1 ? this.t : (double?)null;
        }
    }

    /// <summary>
    ///     Option type containing boolean flag and maybe valid data.
    /// </summary>     [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Optionu64
    {
        ///Element that is maybe valid.
        ulong t;
        ///Byte where `1` means element `t` is valid.
        byte is_some;
    }
    public partial struct Optionu64
    {
        public static Optionu64 FromNullable(ulong? nullable)
        {
            var result = new Optionu64();
            if (nullable.HasValue)
            {
                result.is_some = 1;
                result.t = nullable.Value;
            }

            return result;
        }

        public ulong? ToNullable()
        {
            return this.is_some == 1 ? this.t : (ulong?)null;
        }
    }


    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate byte CallbackCharFFISlice(Sliceu8 slice);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate CustomString CallbackCustomStringFFISlice(SliceCustomString slice);



    public class InteropException<T> : Exception
    {
        public T Error { get; private set; }

        public InteropException(T error): base($"Something went wrong: {error}")
        {
            Error = error;
        }
    }

}
