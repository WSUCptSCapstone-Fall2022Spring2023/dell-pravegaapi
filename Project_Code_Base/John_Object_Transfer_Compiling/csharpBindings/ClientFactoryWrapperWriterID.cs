// Automatically generated by Interoptopus.

#pragma warning disable 0105
using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime;
using System.Runtime.InteropServices;
using Pravega;
#pragma warning restore 0105

namespace Pravega
{

    /// ******************************************
    ///     Helper structs (used for transferring
    ///     small Rust native components to C#)
    /// ******************************************
    // U128 wrapper for sending between C# and Rust
    // NOTE: u128 normally is comprised of 1 value, but u128 is not C palatable and as such can't be transferred
    //  between C# and Rust. The solution here is to split the two halves of the u128 into two u64 values that
    //  are C palatable. 
    //  -When sent from one side to another, a u128 value is split into the two halves and bitwise ORed into the
    //      two halves of this struct.
    //  -When recieved from another wise, the first and second halves are ORed at different points on a u128 value
    //      initialized at 0. first_half -> bits 0-63 and second_half -> bits 64-127. This builds the u128 back up
    //      from its parts.
    //  There isn't an easy way to transfer a value this big between the two sides, but doing so is O(1) each time.
    //      For now, this is the fastest way to go between the two without risking using slices.
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct CustomU128
    {
        public ulong first_half;
        public ulong second_half;
    }
    public partial struct CustomU128{

        // Equals
        public override bool Equals(CustomU128 obj)
        {
            // null case
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }

            // equals for U128
            if (obj.first_half == this.first_half && obj.second_half == this.second_half){
                return true;
            }
            return false;
        }
    }



    /// ******************************************
    ///     Pravega Component structs
    /// ******************************************
    //  ***** Wrapper for WriterID *****
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct WriterIdWrapper
    {
        public CustomU128 inner;
    }
    /* Originally from pravega-client-rust/shared/src/lib.rs 
        as:
        #[derive(From, Shrinkwrap, Copy, Clone, Hash, PartialEq, Eq)]
        pub struct WriterId(pub u128);
    */



    public class InteropException<T> : Exception
    {
        public T Error { get; private set; }

        public InteropException(T error): base($"Something went wrong: {error}")
        {
            Error = error;
        }
    }

}
