// Automatically generated by Interoptopus.

#pragma warning disable 0105
using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using Pravega;
#pragma warning restore 0105

namespace Pravega
{

    /// ******************************************
    ///     Pravega Component structs
    /// ******************************************
    // Note: These are left intentionally unfinished 
    //  these will be completed once our team works on
    //  the Index module.
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct AsyncSegmentReaderImplHolder
    {
        byte inner;
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct ByteWriterHolde
    {
        byte inner;
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct ClientFactoryAsyncHolder
    {
        byte inner;
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct ScopedStreamHolder
    {
        byte inner;
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct SegmentMetadataClientHolder
    {
        byte inner;
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct IndexReaderWrapper
    {
        ScopedStreamHolder stream;
        ClientFactoryAsyncHolder factory;
        SegmentMetadataClientHolder meta;
        AsyncSegmentReaderImplHolder segment_reader;
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct IndexWriterWrapperu8
    {
        ByteWriterHolder byte_writer;
        OptionU128U64TupleSlice hashed_fields;
        Optionu8 fields;
    }



    /// ******************************************
    ///     Slice types (segments of vectors)
    /// ******************************************
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct U128U64TupleSlice
    {
        public IntPtr slice_pointer;
        public ulong length;
    }
    public partial struct U128U64TupleSlice : IEnumerable<Tuple<CustomU128, ulong>>
    {
        public U16Slice(GCHandle handle, ulong count)
        {
            this.slice_pointer = handle.AddrOfPinnedObject();
            this.length = count;
        }
        public U16Slice(IntPtr handle, ulong count)
        {
            this.slice_pointer = handle;
            this.length = count;
        }
        public ushort this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                var size = Marshal.SizeOf(Tuple<CustomU128, ulong>);
                var ptr = new IntPtr(slice_pointer.ToInt64() + i * size);
                return Marshal.PtrToStructure<Tuple<CustomU128, ulong>>(ptr);
            }
            set
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                var size = Marshal.SizeOf(Tuple<CustomU128, ulong>);
                var ptr = new IntPtr(slice_pointer.ToInt64() + i * size);
                Marshal.StructureToPtr<Tuple<CustomU128, ulong>>(value, ptr, false);
            }
        }
        public Tuple<CustomU128, ulong>[] Copied
        {
            get
            {
                var rval = new Tuple<CustomU128, ulong>[length];
                for (var i = 0; i < (int)length; i++)
                {
                    rval[i] = this[i];
                }
                return rval;
            }
        }
        public int Count => (int)length;
        public IEnumerator<Tuple<CustomU128, ulong>> GetEnumerator()
        {
            for (var i = 0; i < (int)length; ++i)
            {
                yield return this[i];
            }
        }
        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }
    
    

    /// ******************************************
    ///     Option types (similar to C# T? types)
    /// ******************************************
    ///Option type containing boolean flag and maybe valid data.
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct OptionU128U64TupleSlice
    {
        ///Element that is maybe valid.
        U128U64TupleSlice t;
        ///Byte where `1` means element `t` is valid.
        byte is_some;
    }

    public partial struct OptionU128U64TupleSlice
    {
        public static OptionU128U64TupleSlice FromNullable(U128U64TupleSlice? nullable)
        {
            var result = new OptionU128U64TupleSlice();
            if (nullable.HasValue)
            {
                result.is_some = 1;
                result.t = nullable.Value;
            }

            return result;
        }

        public U128U64TupleSlice? ToNullable()
        {
            return this.is_some == 1 ? this.t : (U128U64TupleSlice?)null;
        }
    }

    ///Option type containing boolean flag and maybe valid data.
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Optionu8
    {
        ///Element that is maybe valid.
        byte t;
        ///Byte where `1` means element `t` is valid.
        byte is_some;
    }

    public partial struct Optionu8
    {
        public static Optionu8 FromNullable(byte? nullable)
        {
            var result = new Optionu8();
            if (nullable.HasValue)
            {
                result.is_some = 1;
                result.t = nullable.Value;
            }

            return result;
        }

        public byte? ToNullable()
        {
            return this.is_some == 1 ? this.t : (byte?)null;
        }
    }



    public class InteropException<T> : Exception
    {
        public T Error { get; private set; }

        public InteropException(T error): base($"Something went wrong: {error}")
        {
            Error = error;
        }
    }

}
