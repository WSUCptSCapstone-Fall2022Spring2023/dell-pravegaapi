// Automatically generated by Interoptopus.

#pragma warning disable 0105
using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using Pravega;
#pragma warning restore 0105

namespace Pravega
{


    /// ******************************************
    ///     Helper structs (used for transferring
    ///     small Rust native components to C#)
    /// ******************************************

    /// <summary>
    ///     Helper struct that helps transfer strings between Rust and C# as this struct is C palatable. Represents a UTF-16 C# String
    /// </summary>
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct CustomCSharpString
    {
        public uint capacity;
        public U16Slice string_slice;
    }
    /// <summary>
    ///     Helper struct that helps transfer strings between Rust and C# as this struct is C palatable. Represents a UTF-8 Rust String
    /// </summary>
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct CustomRustString
    {
        public uint capacity;
        public U8Slice string_slice;
    }



    /// ******************************************
    ///     Pravega Component structs
    /// ******************************************

    //  ***** Wrapper for Scope *****
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct ScopeWrapper
    {
        public CustomCSharpString name;
    }
    /*
        Originally from pravega-client-rust/shared/src/lib.rs 
        as:
        #[derive(From, Shrinkwrap, Debug, Display, Clone, Hash, PartialEq, Eq, Serialize, Deserialize)]
        pub struct Scope {
            pub name: String,
        }
    */
    
    //  ***** Wrapper for Stream *****
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct StreamWrapper
    {
        public CustomCSharpString name;
    }
    /*
        Originally from 
        as: 
        #[derive(From, Shrinkwrap, Debug, Display, Clone, Hash, PartialEq, Eq, Serialize, Deserialize)]
        pub struct Stream {
            pub name: String,
        }
    */

    //  ***** Wrapper for ScopedStream *****
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct ScopedStreamWrapper
    {
        public ScopeWrapper scope;
        public StreamWrapper stream;
    }
    /*
        Originally from pravega-client-rust/shared/src/lib.rs 
        as: 
        #[derive(new, Debug, Clone, Hash, PartialEq, Eq, Serialize, Deserialize)]
        pub struct ScopedStream {
            pub scope: Scope,
            pub stream: Stream,
        }   
    */

    

    /// ******************************************
    ///     Slice types (segments of vectors)
    /// ******************************************

    ///A pointer to an array of data someone else owns which may be modified.
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct U8Slice
    {
        public IntPtr slice_pointer;
        public ulong length;
    }
    public partial struct U8Slice : IEnumerable<byte>
    {
        public U8Slice(GCHandle handle, ulong count)
        {
            this.slice_pointer = handle.AddrOfPinnedObject();
            this.length = count;
        }
        public U8Slice(IntPtr handle, ulong count)
        {
            this.slice_pointer = handle;
            this.length = count;
        }
        public byte this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                var size = Marshal.SizeOf(typeof(byte));
                var ptr = new IntPtr(slice_pointer.ToInt64() + i * size);
                return Marshal.PtrToStructure<byte>(ptr);
            }
            set
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                var size = Marshal.SizeOf(typeof(byte));
                var ptr = new IntPtr(slice_pointer.ToInt64() + i * size);
                Marshal.StructureToPtr<byte>(value, ptr, false);
            }
        }
        public byte[] Copied
        {
            get
            {
                var rval = new byte[length];
                for (var i = 0; i < (int) length; i++) {
                    rval[i] = this[i];
                }
                return rval;
            }
        }
        public int Count => (int) length;
        public IEnumerator<byte> GetEnumerator()
        {
            for (var i = 0; i < (int)length; ++i)
            {
                yield return this[i];
            }
        }
        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct U16Slice
    {
        public IntPtr slice_pointer;
        public ulong length;
    }
    public partial struct U16Slice : IEnumerable<ushort>
    {
        public U16Slice(GCHandle handle, ulong count)
        {
            this.slice_pointer = handle.AddrOfPinnedObject();
            this.length = count;
        }
        public U16Slice(IntPtr handle, ulong count)
        {
            this.slice_pointer = handle;
            this.length = count;
        }
        public ushort this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                var size = Marshal.SizeOf(typeof(byte));
                var ptr = new IntPtr(slice_pointer.ToInt64() + i * size);
                return Marshal.PtrToStructure<byte>(ptr);
            }
            set
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                var size = Marshal.SizeOf(typeof(ushort));
                var ptr = new IntPtr(slice_pointer.ToInt64() + i * size);
                Marshal.StructureToPtr<ushort>(value, ptr, false);
            }
        }
        public ushort[] Copied
        {
            get
            {
                var rval = new ushort[length];
                for (var i = 0; i < (int)length; i++)
                {
                    rval[i] = this[i];
                }
                return rval;
            }
        }
        public int Count => (int)length;
        public IEnumerator<ushort> GetEnumerator()
        {
            for (var i = 0; i < (int)length; ++i)
            {
                yield return this[i];
            }
        }
        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }
    /*
        Demonstration on converting a string into a u16 slice

        string testString = "test";
        U16Slice test;
        test.slice_pointer = Marshal.StringToHGlobalAnsi(testString);
        test.length = (ulong)testString.Length;
        CustomCSharpString testCustomString = new CustomCSharpString();
        testCustomString.string_slice = test;
        for (ulong i = 0; i < testCustomString.string_slice.length; i++)
        {
            Console.WriteLine((char)testCustomString.string_slice[(int)i]);
        }           
    */

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct CustomRustStringSlice
    {
        public IntPtr slice_pointer;
        public ulong length;
    }
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct CustomCSharpStringSlice
    {
        public IntPtr slice_pointer;
        public ulong length;
    }
    


    public class InteropException<T> : Exception
    {
        public T Error { get; private set; }

        public InteropException(T error): base($"Something went wrong: {error}")
        {
            Error = error;
        }
    }

}
