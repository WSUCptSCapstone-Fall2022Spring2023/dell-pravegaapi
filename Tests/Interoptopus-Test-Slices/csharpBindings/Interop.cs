// Automatically generated by Interoptopus.

#pragma warning disable 0105
using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using My.Company;
#pragma warning restore 0105

namespace My.Company
{
    public static partial class Interop
    {
        public const string NativeLib = @"C:\Users\brand\Documents\Capstone\dell-pravegaapi\Tests\Interoptopus-Test-Slices\target\debug\deps\testing.dll";

        static Interop()
        {
        }


        /// Function using the type.
        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "my_function")]
        public static extern Vec2 my_function(Vec2 input);

        /// Function using the type.
        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "pattern_ffi_slice_1")]
        public static extern uint pattern_ffi_slice_1(Sliceu32 ffi_slice);

        /// Function using the type.
        public static uint pattern_ffi_slice_1(uint[] ffi_slice)
        {
            var ffi_slice_pinned = GCHandle.Alloc(ffi_slice, GCHandleType.Pinned);
            var ffi_slice_slice = new Sliceu32(ffi_slice_pinned, (ulong) ffi_slice.Length);
            try
            {
                return pattern_ffi_slice_1(ffi_slice_slice);;
            }
            finally
            {
                ffi_slice_pinned.Free();
            }
        }

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "get_value_at_index")]
        public static extern uint get_value_at_index(Sliceu32 ffi_slice, int i);

        public static uint get_value_at_index(uint[] ffi_slice, int i)
        {
            var ffi_slice_pinned = GCHandle.Alloc(ffi_slice, GCHandleType.Pinned);
            var ffi_slice_slice = new Sliceu32(ffi_slice_pinned, (ulong) ffi_slice.Length);
            try
            {
                return get_value_at_index(ffi_slice_slice, i);;
            }
            finally
            {
                ffi_slice_pinned.Free();
            }
        }

    }

    /// A simple type in our FFI layer.
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Vec2
    {
        public float x;
        public float y;
    }

    ///A pointer to an array of data someone else owns which may not be modified.
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Sliceu32
    {
        ///Pointer to start of immutable data.
        public IntPtr data;
        ///Number of elements.
        public ulong len;
    }

    public partial struct Sliceu32 : IEnumerable<uint>
    {
        public Sliceu32(GCHandle handle, ulong count)
        {
            this.data = handle.AddrOfPinnedObject();
            this.len = count;
        }
        public Sliceu32(IntPtr handle, ulong count)
        {
            this.data = handle;
            this.len = count;
        }
        public uint this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                var size = Marshal.SizeOf(typeof(uint));
                var ptr = new IntPtr(data.ToInt64() + i * size);
                return Marshal.PtrToStructure<uint>(ptr);
            }
        }
        public uint[] Copied
        {
            get
            {
                var rval = new uint[len];
                for (var i = 0; i < (int) len; i++) {
                    rval[i] = this[i];
                }
                return rval;
            }
        }
        public int Count => (int) len;
        public IEnumerator<uint> GetEnumerator()
        {
            for (var i = 0; i < (int)len; ++i)
            {
                yield return this[i];
            }
        }
        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }




    public class InteropException<T> : Exception
    {
        public T Error { get; private set; }

        public InteropException(T error): base($"Something went wrong: {error}")
        {
            Error = error;
        }
    }

}
